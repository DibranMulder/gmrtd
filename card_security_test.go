package gmrtd

import (
	"testing"

	"github.com/gmrtd/gmrtd/utils"
)

func TestNewCardSecurityNoData(t *testing.T) {
	if cardSec, err := NewCardSecurity(nil); cardSec != nil || err != nil {
		t.Errorf("Should be nil when no input data provided")
	}

	if cardSec, err := NewCardSecurity([]byte{}); cardSec != nil || err != nil {
		t.Errorf("Should be nil when no input data provided")
	}
}

func TestNewCardSecurityUnhappyBadData(t *testing.T) {
	var cardSecurityFile []byte = utils.HexToBytes("0608") // invalid data

	cardSecurity, err := NewCardSecurity(cardSecurityFile)

	if err == nil {
		t.Errorf("Error expected")
	}

	if cardSecurity != nil {
		t.Errorf("CardSecurity not expected for error case")
	}
}

func TestNewCardSecurityDE(t *testing.T) {
	var cardSecurityFile []byte = utils.HexToBytes

	cardSecurity, err := NewCardSecurity(cardSecurityFile)

	if err != nil {
		t.Errorf("Unexpected error: %s", err)
	} else if cardSecurity == nil {
		t.Errorf("CardSecurity expected")
	}

	if cardSecurity != nil {
		var validSignedData bool
		validSignedData, err = cardSecurity.SD.SD2.Verify()
		if err != nil {
			t.Errorf("Error verifying SignedData: %s", err)
		} else if !validSignedData {
			t.Errorf("SignedData could NOT be verified")
		}
	}

	// TODO - check securityInfos?
}

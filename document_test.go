package gmrtd

import (
	"testing"
)

func TestChipAuthStatusString(t *testing.T) {
	testCases := []struct {
		chipAuthStatus ChipAuthStatus
		expStr string
	}{
		{
			chipAuthStatus: CHIP_AUTH_STATUS_NONE,
			expStr: "n/a",
		},
		{
			chipAuthStatus: CHIP_AUTH_STATUS_PACE_CAM,
			expStr: "PACE-CAM",
		},
		{
			chipAuthStatus: CHIP_AUTH_STATUS_CA,
			expStr: "Chip Authentication",
		},
		{
			chipAuthStatus: CHIP_AUTH_STATUS_AA,
			expStr: "Active Authentication",
		},
	}
	for _, tc := range testCases {
		actStr := tc.chipAuthStatus.String()

		if actStr != tc.expStr {
			t.Errorf("ChipAuthStatus string() differs to expected (Exp:%s, Act:%s)", tc.expStr,actStr)
		}
	}
}

// TODO - these could all be table-based tests...

// tests the Lds/Unicode version when only the document is empty (i.e no EF.COM or EF.SOD)
func TestVersionUnhappyEmptyDoc(t *testing.T) {
	var doc Document

	expLdsVer := ""
	expUnicodeVer := ""

	{
		ldsVersion := doc.LdsVersion()
		if ldsVersion != expLdsVer {
			t.Errorf("Incorrect LdsVersion (Exp:%s, Act:%s)", expLdsVer, ldsVersion)
		}
	}

	{
		unicodeVersion := doc.UnicodeVersion()
		if unicodeVersion != expUnicodeVer {
			t.Errorf("Incorrect UnicodeVersion (Exp:%s, Act:%s)", expUnicodeVer, unicodeVersion)
		}
	}
}

// tests the Lds/Unicode version when both EF.SOD and EF.COM are present
func TestVersionHappyFromSOD(t *testing.T) {
	var doc Document
	var err error

	// modified from EF.COM test (9303-p10) (LdsVer:1234, UnicodeVer:654321)
	efComBytes := HexToBytes("60145F0104313233345F36063635343332315C026175")

	// SG SOD test data (LdsVer:0108, UnicodeVer:040000)
	efSodBytes := HexToBytes

	expLdsVer := "0108"
	expUnicodeVer := "040000"

	doc.Com, err = NewCOM(efComBytes)
	if err != nil {
		t.Errorf("Unexpected error: %s", err)
	}

	doc.Sod, err = NewSOD(efSodBytes)
	if err != nil {
		t.Errorf("Unexpected error: %s", err)
	}

	{
		ldsVersion := doc.LdsVersion()
		if ldsVersion != expLdsVer {
			t.Errorf("Incorrect LdsVersion (Exp:%s, Act:%s)", expLdsVer, ldsVersion)
		}
	}

	{
		unicodeVersion := doc.UnicodeVersion()
		if unicodeVersion != expUnicodeVer {
			t.Errorf("Incorrect UnicodeVersion (Exp:%s, Act:%s)", expUnicodeVer, unicodeVersion)
		}
	}
}

// tests the Lds/Unicode version when only EF.COM is present (i.e. no EF.SOD)
func TestVersionHappyFromCOM(t *testing.T) {
	var doc Document
	var err error

	// modified from EF.COM test (9303-p10) (LdsVer:1234, UnicodeVer:654321)
	efComBytes := HexToBytes("60145F0104313233345F36063635343332315C026175")

	expLdsVer := "1234"
	expUnicodeVer := "654321"

	doc.Com, err = NewCOM(efComBytes)
	if err != nil {
		t.Errorf("Unexpected error: %s", err)
	}

	{
		ldsVersion := doc.LdsVersion()
		if ldsVersion != expLdsVer {
			t.Errorf("Incorrect LdsVersion (Exp:%s, Act:%s)", expLdsVer, ldsVersion)
		}
	}

	{
		unicodeVersion := doc.UnicodeVersion()
		if unicodeVersion != expUnicodeVer {
			t.Errorf("Incorrect UnicodeVersion (Exp:%s, Act:%s)", expUnicodeVer, unicodeVersion)
		}
	}
}
